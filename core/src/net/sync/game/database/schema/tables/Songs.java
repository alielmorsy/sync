/*
 * Copyright (c) 2020 Vincenzo Fortunato.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * This file is generated by jOOQ.
*/
package net.sync.game.database.schema.tables;


import net.sync.game.database.schema.DefaultSchema;
import net.sync.game.database.schema.Keys;
import net.sync.game.database.schema.tables.records.SongsRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Songs extends TableImpl<SongsRecord> {

    private static final long serialVersionUID = 2076949533;

    /**
     * The reference instance of <code>songs</code>
     */
    public static final Songs SONGS = new Songs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SongsRecord> getRecordType() {
        return SongsRecord.class;
    }

    /**
     * The column <code>songs.id</code>.
     */
    public final TableField<SongsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>songs.pack</code>.
     */
    public final TableField<SongsRecord, String> PACK = createField("pack", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.directory</code>.
     */
    public final TableField<SongsRecord, String> DIRECTORY = createField("directory", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.hash</code>.
     */
    public final TableField<SongsRecord, String> HASH = createField("hash", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.sim_path</code>.
     */
    public final TableField<SongsRecord, String> SIM_PATH = createField("sim_path", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.format</code>.
     */
    public final TableField<SongsRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.title</code>.
     */
    public final TableField<SongsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.subtitle</code>.
     */
    public final TableField<SongsRecord, String> SUBTITLE = createField("subtitle", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.artist</code>.
     */
    public final TableField<SongsRecord, String> ARTIST = createField("artist", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.genre</code>.
     */
    public final TableField<SongsRecord, String> GENRE = createField("genre", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.banner_path</code>.
     */
    public final TableField<SongsRecord, String> BANNER_PATH = createField("banner_path", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.background_path</code>.
     */
    public final TableField<SongsRecord, String> BACKGROUND_PATH = createField("background_path", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.album</code>.
     */
    public final TableField<SongsRecord, String> ALBUM = createField("album", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.music_path</code>.
     */
    public final TableField<SongsRecord, String> MUSIC_PATH = createField("music_path", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.sample_start</code>.
     */
    public final TableField<SongsRecord, Float> SAMPLE_START = createField("sample_start", org.jooq.impl.SQLDataType.REAL.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.REAL)), this, "");

    /**
     * The column <code>songs.sample_length</code>.
     */
    public final TableField<SongsRecord, Float> SAMPLE_LENGTH = createField("sample_length", org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * Create a <code>songs</code> table reference
     */
    public Songs() {
        this("songs", null);
    }

    /**
     * Create an aliased <code>songs</code> table reference
     */
    public Songs(String alias) {
        this(alias, SONGS);
    }

    private Songs(String alias, Table<SongsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Songs(String alias, Table<SongsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SongsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SONGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SongsRecord> getPrimaryKey() {
        return Keys.PK_SONGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SongsRecord>> getKeys() {
        return Arrays.<UniqueKey<SongsRecord>>asList(Keys.PK_SONGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Songs as(String alias) {
        return new Songs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Songs rename(String name) {
        return new Songs(name, null);
    }
}
